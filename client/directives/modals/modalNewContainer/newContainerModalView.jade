.modal-backdrop.in
  animated-panel-container.modal-dialog.modal-lg
    animated-panel.grid-block.vertical.modal-server-select(
      default = "true"
      name = "containerSelection"
    )
      header.modal-header.grid-block.justify-center.row-xxs(
        ng-click = "MC.changeTab('nameContainer')"
      )
        .grid-block.shrink.btn(
          ng-class = "{'active': MC.state.tabName === 'repos'}"
          ng-click = "MC.changeTab('repos')"
        )
          svg.iconnables.icons-repository.grid-block.shrink
            use(
              xlink:href = "#icons-new-repository-server"
            )
          .btn-text.grid-block Create from a repository
        //- disable this button when loading a repository
        .grid-block.shrink.btn(
          ng-disabled = "$root.isLoading[MC.name + 'SingleRepo']"
          ng-class = "{\
            'active': MC.state.tabName === 'services', \
            'btn-hint': MC.servicesActive, \
            'disabled': $root.isLoading[MC.name + 'SingleRepo'] \
          }"
          ng-click = "!$root.isLoading[MC.name + 'SingleRepo'] && MC.changeTab('services')"
        )
          svg.iconnables.icons-template.grid-block.shrink
            use(
              xlink:href = "#icons-server-new"
            )
          .btn-text.grid-block.vertical.text-left Create from a template
            small.small For services and databases
        svg.iconnables.icons-close(
          ng-click = "MC.close()"
        )
          use(
            xlink:href = "#icons-close"
          )

      .modal-body(
        ng-if = "MC.state.tabName === 'repos'"
        ng-include = "'newRepositorySelectionView'"
      )

      .modal-body(
        ng-if = "MC.state.tabName === 'services'"
        ng-include = "'templateSelectSectionView'"
      )

    animated-panel.grid-block.vertical.modal-mirror-dockerfile(
      name = "dockerfileMirroring"
    )
      header.modal-header
        svg.iconnables.icons-arrow-backward(
          ng-click = "!$root.isLoading[MC.name + 'SingleRepo'] && goToPanel('containerSelection', 'back')"
        )
          use(
            xlink:href = "#icons-arrow-down"
          )
        h1.modal-heading Choose Configuration
        svg.iconnables.icons-close(
          ng-click = "MC.close()"
        )
          use(
            xlink:href = "#icons-close"
          )

      .grid-block.vertical.modal-body(
        ng-include = "'mirrorDockerfileView'"
      )

      .modal-footer.clearfix
        button.btn.btn-md.white.float-left(
          ng-click = "MC.close()"
        ) Cancel
        //- add the 'in' class to .btn-spinner when spinning!
        button.btn.btn-md.green.float-right.btn-spinner(
          ng-disabled = "$root.isLoading[MC.name + 'SingleRepo'] || MC.state.dockerfile === null"
          ng-click = "MC.createBuildAndGoToNewRepoModal(MC.state.repo, MC.state.dockerfile)"
          ng-class = "{ \
            in: $root.isLoading[MC.name + 'SingleRepo'] \
          }"
        )
          .spinner-wrapper.spinner-white.spinner-sm.in(
            ng-include = "'spinner'"
            ng-if = "$root.isLoading[MC.name + 'SingleRepo']"
          )
          | Next Step{{MC.state.dockerfile === false ? ': Configure' : ': Review'}}

    animated-panel.grid-block.vertical.modals-rename(
      name = "nameContainer"
    )
      header.modal-header
        svg.iconnables.icons-arrow-backward(
          ng-click = "!$root.isLoading[MC.name + 'SingleRepo'] && goToPanel('containerSelection', 'back')"
        )
          use(
            xlink:href = "#icons-arrow-down"
          )
        h1.modal-heading.text-overflow Name Container
        svg.iconnables.icons-close(
          ng-click = "MC.close()"
        )
          use(
            xlink:href = "#icons-close"
          )
      section.modal-body
        form.modal-form(
          name = "nameForm"
        )
          label.label.clearfix
            .label-col Container Name
            .input-col
              div(
                ng-attr-data-length = "{{19 - nameForm.newName.$viewValue.length}}"
                ng-class = "{\
                  'ng-invalid': nameForm.$error.maxlength,\
                  'validate-length': nameForm.$error.maxlength,\
                  'validate-sm': nameForm.$error.maxlength\
                }"
              )
                input.input.input-sm.input-validate(
                  autocomplete = "off"
                  name = "newName"
                  ng-maxlength = "19"
                  ng-model = "MC.name"
                  ng-pattern = "/^[a-zA-Z0-9-]*$/"
                  spellcheck = "false"
                  unique-validator = "MC.instanceNames"
                  placeholder = "{{MC.instanceToForkName}}"
                  no-double-dash-validator
                )

              ul.list.list-bulleted.list-validation
                li.list-item(
                  ng-class = "{'ng-invalid': nameForm.$error.unique}"
                ) Choose a unique name in your Sandbox
                li.list-item(
                  ng-class = "{'ng-invalid': nameForm.$error.pattern || nameForm.$error.noDoubleDash}"
                ) Use letters, numbers, and single hyphens (-)
                li.list-item(
                  ng-class = "{'ng-invalid': nameForm.$error.maxlength}"
                ) Use 19 characters or less

      footer.modal-footer.clearfix
        button.btn.btn-md.gray.btn-cancel.float-left(
          ng-click = "MC.actions.cancel()"
        ) Cancel
        button.btn.btn-md.green.float-right.btn-spinner(
          ng-disabled = "!MC.name.length || nameForm.$invalid || MC.saving"
          ng-class = "{'in': MC.saving}"
          ng-click = "MC.actions.save()"
        )
          .spinner-wrapper.spinner-white.spinner-sm.in(
            ng-include = "'spinner'"
            ng-if = "MC.saving"
          )
          | Create Container
