.help-container(
  ng-if = "helpCards.getActiveCard().helpPopover.repositories"
)
  .help(
    ng-bind-html = "helpCards.getActiveCard().helpPopover.repositories"
  )

.label.clearfix
  .label-col Initial Branch

  .input-col
    fancy-select(
      ng-disabled = "branchFetching"
      ng-required = "true"
      value = "state.branch"
      track-by = "attrs.name"
      spinner-flag = "branchFetching"
    )
      li.list-item.popover-list-item.small Select initial branch
      fancy-option(
        ng-repeat = "branch in $parent.state.repo.branches.models"
        value = "branch"
      )
        svg.iconnables.icons-branch
          use(
            xlink:href = "#icons-branch"
          )
        | {{ $parent.branch.attrs.name }}
    small.small We’ll build the first container with the code on this branch. We recommend choosing a stable branch.

.label.clearfix
  .label-col Build Commands
    small.small (optional)

  .input-col(
    ng-if = "!$root.featureFlags.buildCommandCache"
  )
    //- we only have suggestions for build commands on the main repository
    textarea.textarea.monospace(
      ng-disabled = "startCommandCanDisable && !state.selectedStack"
      ng-model = "state.commands"
      placeholder = "Build commands"
      spellcheck = "false"
    )
    small.small These will be run when your container is built but before it’s launched.

  .input-col(
    ng-if = "$root.featureFlags.buildCommandCache"
  )
    label.small.strong.text-right.toggle-wrapper Cache a command
      input.toggle-input(
        type = "checkbox"
        ng-model = "cache"
      )
      .toggle-group.toggle-xs.toggle-cache.float-right
    .build-commands-wrapper
      .text-area-wrapper
        
        //- this textarea needs to expand horizontally and vertically to contain its content, like the contentEditable
        //- div below (I know, sorry). alternatively, we could use the contentEditable div, but we'd have to find a way
        //- to fix its weird pasting behavior.
        //- textarea.textarea.monospace(
        //-   ng-disabled = "startCommandCanDisable && !state.selectedStack"
        //-   ng-model = "state.commands"
        //-   placeholder = "Build Commands"
        //-   spellcheck = "false"
        //- )

        //- this element and its contents are only for demonstration. it behaves how the textarea should behave.
        .content-editable.monospace(
          contentEditable = "true"
          spellcheck = "false"
        )
          div npm install
          div npm install
          div npm install
          div npm install
          div npm install
          div npm install
          div npm install
          div npm install
          div npm install

      //- this element should start out empty. then, for each line that is added to the 
      //- textarea, one radio button and one .cache-row should be added to it.
      .cache-column(
        ng-class = "{in: cache}"
      )
        //- this content is just for demonstration.
        input.input-radio(
          checked
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
        input.input-radio(
          name = "cache-radio"
          type = "radio"
        )
        .cache-row
    small.small These will be run when your container is built but before it’s launched.

label.label.clearfix
  .label-col Container CMD

  .input-col
    fancy-select.monospace(
      ng-disabled = "startCommandCanDisable && !state.selectedStack.selectedVersion"
      ng-required = "ngShow()"
      name = "repository.startCommand"
      placeholder = "Container CMD"
      show-dropdown = "state.selectedStack.startCommand"
      type = "text"
      value = "state.startCommand"
    )
      li.list-item.popover-list-item.small Suggested Container CMDs
      fancy-option(
        ng-repeat = "startCmd in $parent.state.selectedStack.startCommand"
        value = "startCmd"
      ) {{$parent.startCmd}}

    small.small This is the command that’ll be executed when your container is launched, to start running your code. This is the long-running process your code requires (e.g. ‘apache’, ‘npm start’, ‘python server.py’).  When this process terminates, your container will also stop running. #{''}
      a.link(
        href = "//docs.docker.com/reference/builder/#cmd"
        target = "_blank"
      ) More about the Container CMD
