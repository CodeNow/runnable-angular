// .input-validate
.input-validate,
.btn-validate {
  transition: none;

  // focus except when invalid and always when pristine
  &:focus,
  &.focus {

    &:not(.ng-invalid),
    &.ng-invalid.ng-pristine {
      border-color: $purple-light;
    }
  }

  // valid
  &.ng-valid {
    border-color: $green;
  }

  // invalid
  &.ng-invalid {
    border-color: $orange;

    // show invalid msg if not pristine
    &:not(.ng-pristine) {

      + .validate-wrapper {
        border: 1px solid rgba($orange,.3);
        height: 36px;
      }
    }
  }

  // pristine
  &.ng-pristine {
    border-color: $gray-lighter;
    box-shadow: none;
  }
}

// .validate-wrapper
.validate-wrapper {
  border: 0;
  border-radius: 0 0 3px 3px;
  line-height: 36px;
  overflow: hidden;
  position: relative;
}

// .validate-rules
.validate-rules {
  font-weight: 500;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  transition: opacity .15s ease-in;

  .btn-xs {
    border-radius: 3px;
    line-height: 1.4;
    margin: 0 3px;
    padding: 0 6px;
  }
}

.invalid-pattern .invalid-pattern,
.invalid-name .invalid-name,
.invalid-require .invalid-require {
  opacity: 1;
}

// .ace-validation-error
.ace-validation-error {
  position: relative;

  &:hover::before {
    opacity: 1;
    transform: translate3d(0,0,0);
  }

  &::after {
    background: $orange;
    border-radius: 50%;
    content: '';
    height: 10px;
    left: 4px;
    position: absolute;
    top: 4px;
    width: 10px;
    z-index: $z-tooltip;
  }

  &::before {
    @extend .tooltip-text;
    content: 'Invalid Env';
    display: block;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    right: -90px;
    top: 24px;
    transform: translate3d(-3px,-3px,0);
    transition: all .2s ease-in;
  }
}
