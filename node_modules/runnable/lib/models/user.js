'use strict';

var util = require('util');
var exists = require('101/exists');
var isString = require('101/is-string');
var ApiClient = require('../api-client');

var intercept = require('../intercept');
var Model = require('./base');

module.exports = User;

function User (attrsOrHost, opts) {
  var attrs, host;
  if (isString(attrsOrHost)) {
    host = attrsOrHost;
    attrs = {};
  }
  else {
    attrs = attrsOrHost;
    host = null;
  }
  this.host = host || 'http://api.runnable.com';
  this.opts = opts || {};
  this.client = this.opts.client = new ApiClient(this.host, this.opts.requestDefaults);
  Model.call(this, attrs, this.opts);
}

util.inherits(User, Model);

User.prototype.urlPath = 'users';

User.prototype.ensureToken = function (cb) {
  if (!this.opts.token) {
    this.anonymous(cb);
  }
  else {
    cb();
  }
};

User.prototype.anonymous = function (cb) {
  var self = this;
  return this.create(intercept(cb, function (body) {
    self.client.opts.token = body.access_token;
    cb(null, body);
  }));
};

User.prototype.register = function (email, username, password, cb) {
  var self = this;
  var errMessage;
  if (!isString(email)) {
    errMessage = !exists(email) ?
      'email must be a string' :
      'email is required';
  }
  if (!isString(username)) {
    errMessage = !exists(username) ?
      'username must be a string' :
      'username is required';
  }
  if (!isString(password)) {
    errMessage = !exists(password) ?
      'password must be a string' :
      'password is required';
  }
  if (errMessage) {
    throw new TypeError(errMessage);
  }
  var opts = {
    json: {
      email: email,
      username: username,
      password: password
    },
    statusCodes: {
      200: true,
      401: false,
      403: false,
      409: false
    }
  };
  this.ensureToken(intercept(cb, register));
  function register () {
    self.update('me', opts, cb);
  }
  return this;
};

User.prototype.login = function (usernameOrEmail, password, cb) {
  var errMessage;
  if (!isString(usernameOrEmail)) {
    errMessage = !exists(usernameOrEmail) ?
      'username must be a string' :
      'username is required';
  }
  if (!isString(password)) {
    errMessage = !exists(password) ?
      'password must be a string' :
      'password is required';
  }
  if (errMessage) {
    throw new TypeError(errMessage);
  }
  var opts = {
    json: {
      email: usernameOrEmail,
      password: password
    },
    statusCodes: {
      200: true,
      401: false,
      403: false
    }
  };
  var self = this;
  this.ensureToken(intercept(cb, login));
  function login () {
    self.client.post('token', opts, intercept(cb, function (body) {
      self.client.opts.token = body.access_token;
      cb(null, body);
    }));
  }
  return this;
};

User.prototype.logout = function (cb) {
  // TODO: api doesnt have logout...
  if (this.client.opts.token) {
    delete this.client.opts.token;
    cb();
  }
  else {
    cb(new Error('not logged in'));
  }
  return this;
};

require('../extend-with-factories')(User, '');