'use strict';
var extend = require('xtend');
var clone = require('clone');
var exists = require('101/exists');
var isString = require('101/is-string');
var isFunction = require('101/is-function');
var isObject = require('101/is-object');
var urlJoin = require('../url-join');
var intercept = require('../intercept');
var pathJoin = require('../url-join');


module.exports = Model;

function Model (attrs, opts) {
  this.opts = opts || {};
  if (!opts.client) {
    throw new TypeError('model requires a client');
  }
  if (!this.urlPath) {
    throw new TypeError('model requires a urlPath');
  }
  if (this.opts.parentPath) {
    this.urlPath = pathJoin(this.opts.parentPath, this.urlPath);
  }

  if (isString(attrs)) {
    var id = attrs;
    this.attrs = {};
    this.id(id);
  }
  else {
    this.attrs = attrs || {};
  }
  this.client = this.opts.client;
}

Model.prototype.id = function (id) {
  if (exists(id)) { //set
    this.attrs[this.opts.idAttribute || '_id'] = id;
  }
  return this.attrs[this.opts.idAttribute || '_id'];
};

Model.prototype.path = function (id) {
  id = id || this.id() || '';
  return urlJoin(this.urlPath, id);
};

Model.prototype.formatArgs = function (args) {
  var id = args[0];
  var opts = args[1];
  var cb = args[2];
  if (isFunction (id)) {
    cb = id;
    id = null;
    opts = null;
  }
  if (isObject(id)) {
    cb = opts;
    opts = id;
    id = null;
  }
  if (isFunction(opts)) {
    cb = opts;
    opts = null;
  }
  id = id || this.id();
  opts = opts || {};
  this.id(id); // sets the id
  return {
    id: id,
    opts: opts,
    cb: cb
  };
};

Model.prototype.create = function (opts, cb) {
  if (isFunction(opts)) {
    cb = opts;
    opts = null;
  }
  if (this.id()) {
    return cb(new Error('Cannot call create on an existing '+Object.getPrototypeOf(this).constructor.name));
  }
  opts = opts || {};
  opts = opts.json || opts.body || opts.qs || opts.headers ?
    opts : { json: opts }; // assume opts are json if no json/body/qs key
  opts.statusCodes = opts.statusCodes || {
    201: true,
    401: false,
    409: false
  };
  var self = this;
  return this.client.post(this.path(), opts, intercept(cb, function (body, code) {
    self.attrs = body;
    cb(null, body, code);
  }));
};

Model.prototype.fetch = function (id, opts, cb) {
  var args = this.formatArgs(arguments);
  id = args.id;
  opts = args.opts;
  opts = opts.qs || opts.headers ?
    opts : { qs: opts }; // assume opts are qs if no qs key
  cb = args.cb;
  if (!isString(id) || id.length === 0) {
    return cb(new TypeError('id is required'));
  }
  opts.statusCodes = opts.statusCodes || {
    200: true,
    401: false,
    404: false
  };
  var self = this;
  return this.client.get(this.path(id), opts, intercept(cb, function (body, code) {
    self.attrs = body;
    cb(null, body, code);
  }));
};

Model.prototype.update = function (id, opts, cb) {
  var args = this.formatArgs(arguments);
  id = args.id;
  opts = args.opts;
  opts = opts.json || opts.body || opts.qs || opts.headers ?
    opts : { json: opts }; // assume opts are json if no json/body/qs key
  cb = args.cb;
  if (!isString(id) || id.length === 0) {
    return cb(new TypeError('id is required'));
  }
  opts.statusCodes = opts.statusCodes || {
    200: true,
    400: false,
    401: false,
    404: false,
    409: false
  };
  var self = this;
  return this.client[opts.put ? 'put' : 'patch'](this.path(id), opts, intercept(cb, function (body, code) {
    self.attrs = opts.put ? body : extend(self.attrs, body);
    cb(null, body, code);
  }));
};

Model.prototype.destroy = function (id, opts, cb) {
  var args = this.formatArgs(arguments);
  id = args.id;
  opts = args.opts;
  opts = opts.json || opts.body || opts.qs || opts.headers ?
    opts : { json: opts }; // assume opts are json if no json/body/qs key
  cb = args.cb;
  if (!isString(id) || id.length === 0) {
    return cb(new TypeError('id is required'));
  }
  opts.statusCodes = opts.statusCodes || {
    200: true,
    204: true,
    400: false,
    401: false,
    404: false
  };
  return this.client.del(this.path(id), opts, cb);
};

Model.prototype.toJSON = function () {
  return clone(this.attrs);
};


