{
  "name": "runnable",
  "version": "0.9.0",
  "private": true,
  "description": "Runnable API Client",
  "main": "index.js",
  "scripts": {
    "test": "mocha test",
    "test-browser": "NODE_ENV=test NODE_PATH=./lib testling -u",
    "test-watch": "nodemon --exec lab -v",
    "build": "NODE_ENV=build node --eval 'require(\"./index\")'"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CodeNow/runnable-api-client.git"
  },
  "keywords": [
    "runnable",
    "api",
    "rest",
    "client",
    "runnable",
    "api",
    "runnable",
    "client",
    "runnable",
    "api",
    "client"
  ],
  "author": {
    "name": "Tejesh Mehta"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/CodeNow/runnable-api-client/issues"
  },
  "homepage": "https://github.com/CodeNow/runnable-api-client",
  "dependencies": {
    "101": "~0.3.2",
    "boom": "~2.4.1",
    "clone": "~0.1.15",
    "debug": "~0.8.1",
    "json-hash": "0.0.4",
    "keypather": "^1.7.0",
    "simple-api-client": "~0.5.3",
    "url-join": "0.0.1",
    "xtend": "^3.0.0"
  },
  "devDependencies": {
    "async": "~0.8.0",
    "chai": "^1.9.1",
    "mocha": "^1.20.1",
    "nodemon": "~1.0.17",
    "uuid": "~1.4.1",
    "api-server": "git+ssh://git@github.com:CodeNow/api#a6411c5be9f8ea71cbfa7d0dd8b8af9f81b6608e"
  },
  "testling": {
    "browsers": [
      "chrome"
    ],
    "harness": "mocha",
    "files": [
      "test/*.js"
    ]
  },
  "readme": "runnable-api-client\n===================\n\nRunnable Api Client\n\n# Usage\n\n## Users\n\n### Tokenless\n```js\nvar user = new Runnable();\n```\n\n### Anonymous\n```js\nvar user = new Runnable();\n\nuser.anonymous(function (err, body) {\n  // ...\n});\n```\n\n### Register\n```js\nvar user = new Runnable();\n\nuser.register('user', 'pass', function (err, body) {\n  // ...\n});\n```\n\n### Login\n```js\nvar user = new Runnable();\n\nuser.login('user', 'pass', function (err, body) {\n  // ...\n});\n```\n\n### Logout\n```js\nvar user = new Runnable();\n\nuser.logout('user', 'pass', function (err, body) {\n  // ...\n});\n```\n\n## Resources\n\n### First level resource (projects)\n```js\nvar user = new Runnable();\n\nuser.login('user', 'pass', function (err, body) {\n  // fetch a specific resource\n  var project = user.fetchProject(projectId, function (err, body, code) {\n    // project becomes a project model\n  });\n  // factory methods and parent actions\n  project = user.newProject(attrs, opts);\n  project = user.fetchProject(projectId, cb);\n  project = user.createProject({ json: data }, cb);\n  project = user.updateProject(projectId, { json: data }, cb);\n  user.destroyProject(projectId, cb);\n  // model methods\n  project.fetch(cb); // fetch latest\n  project.update({ json: attrs }, cb); // update the resource attrs\n  project.destroy(cb); // delete the resource through the api\n  project.toJSON(); // last clientside known state of the resource\n\n  // fetch a collection of resources\n  var projects = user.fetchProjects(projectId, function (err, body, code) {\n    // project becomes a collection of projects\n  });\n  projects.models; // are all models of the resources fetched\n});\n```\n\n\n# Development\n\n## How to add a Model\n\nRunnable api client's directory structure follows the api url\nstructure and the structure of our resources.\n\n### Example - Adding a model for project environments:\nProject environments are a nested resource - /projects/:id/environments/:id\n\n#### Create a new file - lib/models/project/environment.js\n\nNote: the singular form of each resource used for the folder and file names.\n\n```js\n'use strict';\n\nvar util = require('util');\nvar Base = require('../base');\nvar urlJoin = require('../../url-join');\n\nmodule.exports = Environment;\n\nfunction Environment (attr, opts) {\n  opts = opts || {};\n  opts.urlPath = urlJoin(opts.parentPath, 'environments');\n  return Base.apply(this, arguments);\n}\n\nutil.inherits(Environment, Base);\n```\n\nAll (99%) of the new models will inherit from the Base Model class like the example above.\nNested Models use `urlJoin(opts.parentPath, <relativePath>)` create their urlPath using\nopts.parentPath. `opts` are being passed to the constructor from `extend-with-factories`\nwhich is explained below. First level resources like Projects (/projects), just need their\nurlPath set directly `Projects.prototype.urlPath = 'projects'` or `opts.urlPath = 'projects'`.\n\n#### Update the parent model Class - lib/models/project.js\n\nThe parent model in this example is Project. Here is the Project Class:\n\n```js\nvar util = require('util');\nvar Base = require('./base');\n\nmodule.exports = Project;\n\nfunction Project () {\n  return Base.apply(this, arguments);\n}\n\nutil.inherits(Project, Base);\n\nProject.prototype.urlPath = 'projects';\n```\n\nAdd the following line to the parent model to automagically create submodel factory/action methods:\n```js\nrequire('../extend-with-factories')(Project);\n```\n\n#### Example usage of the newly created environment model\n\n```js\nvar projectId = \"real-project-id\";\nvar user = new Runnable(), environment;\n\nuser.anonymous(function (err) {\n  if (err) { throw err; }\n\n  var project = user.fetchProject(projectId, function (err) {\n    if (err) { throw err; }\n\n    // automagical environment factory methods:\n    environment = project.newEnvironment(attrs, opts);  // create a new environment instance\n    environment = project.fetchEnvironment(projectId, cb); // fetches an environment instance from the api server\n    environment = project.createEnvironment({ json: attrs }, cb); // makes a post request to create a new environment\n    // automagical environment action methods:\n    project.updateEnvironment(projectId, { json: attrs }, cb);\n    project.destroyEnvironment(projectId, cb);\n\n    // Action methods inherited by the Base Model\n    environment.fetch(cb); // get latest data from server\n    environment.update({ json: attrs }, cb);\n    environment.destroy(cb);\n  });\n});\n\n```\n\n## How to add a Collection\n\nCreating a collection is very similar to the model example. The only difference is that you\nshould inherit from the Base collection. Also, factory methods created use the plural form\nof the resource name - Ex: `project.getEnvironments(cb)`. There are examples of all types of\nmodels and collections (first level and nested), when in doubt look for an existing example\nin the code base.",
  "readmeFilename": "README.md",
  "_id": "runnable@0.9.0",
  "dist": {
    "shasum": "be35626411e03f4b56fe7064cc0dd7c27c4d97ef"
  },
  "_resolved": "git+ssh://git@github.com:CodeNow/runnable-api-client#98359932de4038864f994dbcc986f32a61fcb88a",
  "_from": "runnable@git+ssh://git@github.com:CodeNow/runnable-api-client#v0.9.0"
}
