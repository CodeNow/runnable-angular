{
  "name": "grunt-githooks",
  "description": "A Grunt plugin to help bind Grunt tasks to Git hooks",
  "version": "0.3.1",
  "homepage": "https://github.com/rhumaric/grunt-githooks",
  "author": {
    "name": "Romaric Pascal",
    "url": "http://rhumaric.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rhumaric/grunt-githooks.git"
  },
  "bugs": {
    "url": "https://github.com/rhumaric/grunt-githooks/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rhumaric/grunt-githooks/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-contrib-copy": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "handlebars": "~1.0.12"
  },
  "readme": "# grunt-githooks\n\n[![Build Status](https://travis-ci.org/rhumaric/grunt-githooks.png?branch=master)](https://travis-ci.org/rhumaric/grunt-githooks)\n[![Code Climate](https://codeclimate.com/github/rhumaric/grunt-githooks.png)](https://codeclimate.com/github/rhumaric/grunt-githooks)\n\n> A Grunt plugin to help bind Grunt tasks to Git hooks\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-githooks --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-githooks');\n```\n\n## The \"githooks\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `githooks` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  githooks: {\n    options: {\n      // Task-specific options go here.\n    },\n    all: {\n      options: {\n        // Target-specific options go here\n      },\n      // Hook definitions go there\n    }\n  },\n})\n```\n\n#### Defining a few hooks\n\nHooks are listed as keys of your target configuration. \n**Any key other than `option`** is considered the name of a hook you want to create. \nThe simplest way to define a hook is to provide a **space-separated list of the tasks you want the hook to run as the value**. \n\nFor example:\n```js\ngrunt.initConfig({\n  githooks: {\n    all: {\n      // Will run the jshint and test:unit tasks at every commit\n      'pre-commit': 'jshint test:unit',\n    }\n  }\n});\n```\n\nThe plugin warns you if the name matches one of the [hooks announced in the Git documentation](https://www.kernel.org/pub/software/scm/git/docs/githooks.html).\nIt will still create the hook, though, in case Git introduces new hooks in the future.\n\n#### Hook specific options\n\nIf you need to override a few options for a given hook only, you can *use and Object instead of a String*. \nThe `taskNames` property will then correspond to the tasks you want to run. \nAny other key will be merged into the options.\n\n```js\ngrunt.initConfig({\n  githooks: {\n    all: {\n      options: {\n        template: 'path/to/a/template'\n      },\n      // Will bind the jshint and test:unit tasks \n      // with the template specified above\n      'pre-commit': 'jshint test:unit',\n\n      // Will bind the bower:install task\n      // with a specific template\n      'post-merge': {\n        taskNames: 'bower:install',\n        template: 'path/to/another/template'\n      }\n    }\n  }\n})\n```\n\n#### Working with existing hooks\n\nIf you happen to have existing hooks in your hook folder, the plugin *appends the code launching Grunt* at the end of your hooks. \nYou can also insert marker comments in your hooks to specify exactly where you want them inserted.\nYour existing hook would look something like this:\n\n```js\n// Some code run before Grunt starts\n\n// GRUNT-GITHOOKS START // GRUNT-GITHOOKS END\n\n// Some code run after Grunt starts\n```\n\nThe markers get automatically inserted when the plugin appends code, so hooks get updated cleanly the next time you run `grunt githooks`.\n\n#### Customising hook output\n\nBy default, the plugin generate NodeJS scripts for the hooks. \nReasonning behind this is that creating Shell scripts won't work well for people using Windows.\nPlus, NodeJS is already installed as Grunt kinda needs it. \nHowever, you're not tied to it and you can customise the generated script entirely. In case of a Shell script:\n\n```js\ngrunt.initConfig({\n  githooks: {\n    all: {\n      options: {\n        // Customize the hashbang to say 'Shell script'\n        hashbang: '#!/bin/sh',\n        // Plugin comes in with a sheel script template already. Handy, innit?\n        template: './node_modules/grunt-githooks/templates/shell.hb',\n        // Customize the markers so comments start with #\n        startMarker: '## LET THE FUN BEGIN',\n        endMarker: '## PARTY IS OVER'\n      }\n    }\n  }\n});\n```\n\nIn the template, you've got access to the following variables:\n\n - *command*: `String` with the name of the command to run\n - *task*: `String` with the name of the tasks to be run\n - *args*: `String` with the list of arguments to provide to the task\n - *gruntfileDirectory*: Absolute path to the directory containing the Gruntfile\n - *preventExit*: Flag telling if the hook should avoid exiting after the grunt task\n - *options*: The options provided to the grunt-githooks task to create this hook\n\n#### Extending the plugin\n\nPretty annoying when you're using a library that's missing the exact extension point you need to tweak its functionalities? \n`grunt-githooks` is based on a lot of small functions and most of them are exposed so you can override them. \nIf you need feel, free to tinker with the internals (at your own risk though ;)). Could be something along:\n\n```js\nvar gruntGithooks = require('grunt-githooks/tasks/githooks');\n\nvar originalFunction = gruntGithooks.internals.Hook.prototype.getHookContent;\ngruntGithooks.internals.Hook.prototype.getHookContent = function () {\n  console.log('Loading content of an existing hook');\n  originalFunction.apply(this, arguments);\n};\n```\n\n### Options\n\n#### command\nType: `String`\nDefaults: `grunt`\n\nThe command that will be run by the hook. This has initally been introduced to\nallow specifying the full path to Grunt in some specific cases. It can also allow\nyou to run another command than Grunt if you need.\n\n#### taskNames\nType: `String`\n\nA space separated list of tasks that will be run by the hook.\n\n#### args\nType: `String`\n\nAdditional CLI arguments to be passed to the command run by the hook.\n\n#### hashbang\nType: `String`\nDefaults: `'#!/usr/bin/env node'`\n\nThe hashbang that will be used at the top of the hook script file. If a hook\nalready exist, the hashbang will be used to check if its ok to append/insert\ncode in it (to avoid inserting Node code in a Python hook for example).\n\n#### template\nType: `String`\n\nPath to the Handlebars template used to generate the code that will run Grunt\nin the hook. Default template is the `node.js.hb` file located in the `templates` folder of the plugin. \nIt also contains a `shell.hb` file with the template for a shell script hook.\n\n> **Note**: Handlebars escapes HTML special characters if you use only two curly braces to insert,\n> a variable in your template. Make sure you use three `{{{my_var}}}` if you need to insert variable\n> that containt quotes, chevrons or anything that would be HTML escaped\n\n#### startMarker\nType: `String`\nDefault: `'// GRUNT-GITHOOKS START'`\n\n#### endMarker\nType: `String`\nDefault: `'// GRUNT-GITHOOKS END'`\n\n`startMarker` and `endMarker` are markers the plugin use to know where to insert code if a hook already exist. \nIf the existing hook doesn't have these markers, the code will simply be appended.\n\n#### preventExit\nType: `Boolean`\nDefault `false`\n\nBy default, the inserted code will exit the process after Grunt has run, using a -1 exit code if the task(s) failed. \nIf you're inserting the code running Grunt in the middle of an existing hook,\nyou might want to disable this so any code after what was inserted by the plugin runs.\n\n#### dest\nType: `String`\nDefault value: `'.git/hooks'`\n\nThis option allows you to choose in which directory the hooks should be generated. \nComes in handy if your Gruntfile is not at the root of your Git project.\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n\n## Release History\n \n - 2013-12-17   v0.3.1   [Escaping fix in the hooks templates](https://github.com/rhumaric/grunt-githooks/pull/15) by @gyoshev. \n - 2013-11-13   v0.3.0   New *command* option to specify which command to run, in case full path to Grunt is needed. NodeJS template now uses new `escapeBackslashes` helper to make sure backslashes ('\\') are properly escaped when written in the hook\n - 2013-10-05   v0.2.0   New *args* option to specify arguments to hooked task. Bugfix to allow running grunt when the Gruntfile is not at the root of the project.\n - 2013-09-02   v0.1.0   Initial functionnalities\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/rhumaric/grunt-githooks/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-githooks@0.3.1",
  "dist": {
    "shasum": "6599f59a5fd0a6bc7880c2e3bf710a59ab4e737c"
  },
  "_from": "grunt-githooks@",
  "_resolved": "https://registry.npmjs.org/grunt-githooks/-/grunt-githooks-0.3.1.tgz"
}
