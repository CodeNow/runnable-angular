// Generated by CoffeeScript 1.7.1
var applyConfig, browserify, chokidar, configs, configuredBrowserify, crypto, debug, depsBundle, depsCache, framework, fs, os, path, preprocessor, through, tmp, watch, watcher, writeDeps,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

crypto = require('crypto');

path = require('path');

os = require('os');

fs = require('fs');

browserify = require('browserify');

through = require('through');

chokidar = require('chokidar');

crypto = require('crypto');

depsCache = [];

depsBundle = null;

tmp = null;

debug = false;

configs = ['transform', 'ignore', 'external'];

applyConfig = function(b, cfg) {
  var c, v, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = configs.length; _i < _len; _i++) {
    c = configs[_i];
    _results.push((function() {
      var _j, _len1, _ref, _results1;
      if (((cfg != null ? cfg[c] : void 0) != null) && ((b != null ? b[c] : void 0) != null)) {
        _ref = [].concat(cfg[c]);
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          v = _ref[_j];
          _results1.push(b[c](v));
        }
        return _results1;
      }
    })());
  }
  return _results;
};

writeDeps = function(callback) {
  return depsBundle.bundle({
    debug: debug
  }, function(err, depsContent) {
    if (err) {
      return err;
    }
    return fs.writeFile(tmp, depsContent, function(err) {
      if (err) {
        return err;
      }
      if (callback != null) {
        return callback();
      }
    });
  });
};

watcher = null;

watch = function(file) {
  if (watcher != null) {
    return watcher.add(file);
  }
  watcher = chokidar.watch(file);
  return watcher.on('change', function() {
    return writeDeps();
  });
};

framework = function(logger, files, config) {
  var fileName, hashedFileName, log;
  if (config == null) {
    config = {};
  }
  log = logger.create('preprocessor.browserify (framework)');
  fileName = __dirname + '_karma-browerify.js';
  hashedFileName = crypto.createHash('md5').update(fileName).digest("hex");
  log.debug('Writing to temp file: "%s".', hashedFileName);
  tmp = path.join((os.tmpdir ? os.tmpdir() : os.tmpDir()), hashedFileName);
  fs.writeFileSync(tmp, '');
  files.unshift({
    pattern: tmp,
    included: true,
    served: true,
    watched: true
  });
  depsBundle = configuredBrowserify(void 0, config);
  return debug = config.debug;
};

preprocessor = function(logger, config) {
  var log;
  if (config == null) {
    config = {};
  }
  log = logger.create('preprocessor.browserify');
  return function(content, file, done) {
    var deps, fileBundle;
    log.debug('Processing "%s".', file.originalPath);
    fileBundle = configuredBrowserify(path.normalize(file.originalPath), config);
    deps = function(opts) {
      return fileBundle.deps(opts).pipe(through(function(row) {
        var _ref;
        if (row.id !== file.originalPath) {
          if (_ref = row.id, __indexOf.call(depsCache, _ref) < 0) {
            depsCache.push(row.id);
          }
          row.source = "module.exports=require('" + (fileBundle._hash(row.id)) + "');";
        }
        return this.queue(row);
      }));
    };
    return fileBundle.bundle({
      deps: deps
    }, function(err, fileContent) {
      var added, d, _i, _len;
      added = false;
      for (_i = 0, _len = depsCache.length; _i < _len; _i++) {
        d = depsCache[_i];
        if (!(__indexOf.call(depsBundle.files, d) < 0)) {
          continue;
        }
        depsBundle.require(d, {
          expose: d
        });
        if (config.watch) {
          watch(d);
        }
        added = true;
      }
      if (!added) {
        return done(fileContent);
      }
      return writeDeps(function() {
        return done(fileContent);
      });
    });
  };
};

configuredBrowserify = function(files, config) {
  var bundle, options;
  if (config == null) {
    config = {};
  }
  options = {
    entries: files && [].concat(files),
    extensions: config.extension || config.extensions || [],
    noParse: config.noParse
  };
  bundle = browserify(options);
  applyConfig(bundle, config);
  return bundle;
};

framework.$inject = ['logger', 'config.files', 'config.browserify'];

preprocessor.$inject = ['logger', 'config.browserify'];

module.exports = {
  'preprocessor:browserify': ['factory', preprocessor],
  'framework:browserify': ['factory', framework]
};
